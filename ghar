#!/bin/sh
# vim: noexpandtab shiftwidth=4 tabstop=4
# Copyright (C) 2009 Brandon Philips <brandon@ifup.org>
# Copyright (C) 2009 Graham Forest <vitaminmoo@obsoleet.org>
# Copyright (C) 2009 Gavin McQuillan <gavin@omnifario.us>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

[ z"$GHAR_HOME" == "z" ] && GHAR_HOME=$HOME
[ z"$GHAR_DIR" == "z" ] && GHAR_DIR=$GHAR_HOME/.ghar
IAM=`basename $0`
[ -d $GHAR_DIR ] && REPOS=$(find $GHAR_DIR ! -name .git -regex ..*.git$ -exec basename {} .git \;)

create_repo_alias() {
	eval "ghar_$1() \
	{ \
		[ \$# = 0 ] && die 1 \"$1 usage: ghar $1 GITCOMMANDS\";
		git --git-dir=$GHAR_DIR/$1.git --work-tree=$GHAR_HOME \$@;\
	}"
}

for i in $REPOS; do
	create_repo_alias $i
done

say() {
	[ $# != 1 ] && die 1 "say() called improperly"
	echo "$IAM: $1"
}

die() {
	[ $# != 2 ] && die 1 "die() called improperly"
	say "$2"
	exit $1
}

ghar__init() { # set up required files
	[ $# != 0 ] && die 1 "init usage: $IAM _init"
	[ -e $GHAR_DIR ] && die 1 "Cannot init $GHAR_DIR already exists!"

	mkdir $GHAR_DIR
}

ghar_create() { # create a new repo to add files to
	[ $# != 1 ] && die 1 "create usage: $IAM create REPOSITORY"
	
	[ ! -e $GHAR_DIR ] && ghar__init
	GITDIR=$GHAR_DIR/$1.git

	for r in $REPOS; do
		[ $r = $1 ] && die 1 "create: repository $1 already exists"
	done

	create_repo_alias $1
	ghar_$1 init
	echo "*" > $GITDIR/info/exclude
}

ghar_list() { # list all repos available for use
	[ $# != 0 ] && die 1 "list usage: $IAM list"
	[ -z "$REPOS" ] && return
	echo "Repositories:"
	echo $REPOS | sed 's/^/	/' 
}

ghar_status() { # list all repos with uncommitted changes
	[ $# != 0 ] && die 1 "status usage: $IAM status"
	[ -z "$REPOS" ] && die 1 "status: no repositories currently exist"
	echo "Repositories with modified files:"
	echo -n "	"
	for REPO in $REPOS
	do
		ghar_$REPO status -a > /dev/null
		[ $? = 0 ] && echo -n "$REPO "
	done
	echo
}

ghar_movein() { # initialize ghar on a remote host
	[ $# -lt 2 ] && die 1 "movein usage: $IAM movein REPO [REPOS...] [USER@]TARGET"
	TARGET=${!#} # last arg
	REPOS_TO_COPY=$(echo $@ | sed "s#$TARGET##") # pop

	MERGE_FILE=$(mktemp)

	echo "+ $GHAR_DIR/" >> $MERGE_FILE
	echo "+ $IAM" >> $MERGE_FILE
	for REPO in $REPOS_TO_COPY
	do
		echo "+ $REPO.git" >> $MERGE_FILE
		echo "+ $REPO.git/**" >> $MERGE_FILE
	done
	echo '- *' >> $MERGE_FILE

	[ z"$SSH_AGENT_PID" != "z" ] && ssh-copy-id "$TARGET"

	# less passwords to copy this way
	[ ! -f "$GHAR_DIR/$IAM" ] && cp -L "$0" "$GHAR_DIR"

	rsync -az --exclude-from=$MERGE_FILE\
		"$GHAR_DIR/" "$TARGET:.ghar"

	rm -f $MERGE_FILE

	ssh "$TARGET" ".ghar/$IAM _movein_stage2"
}

ghar__movein_stage2() { # support function for movein
	[ $# != 0 ] && die 1 "_movein_stage2 usage: $IAM _movein_stage2"

	if [ -z $(which git) ]; then
		rm -f "$0"
		die 1 "movein: git doesn't seem to be installed on the remote host"
	fi

	for REPO in $REPOS
	do
		git --git-dir=$GHAR_DIR/$REPO.git archive master\
			| tar -x -k -C $HOME/ 2>/dev/null # brain-dead tar errors with -k
	done
}

ghar_help() { # provide help
	echo "git home as repository"
	echo "usage: ghar <function|repository> [git command]"
	echo "Commands:"
	grep "^ghar_[[:alnum:]]*() {" $0 | cut -d_ -f2\
		| sed 's/^/	/; s/() { # /	- /'
	ghar_list
}

FUNCTION=$1
shift


if [ -z `type -t ghar_$FUNCTION` ]; then
	ghar_help
	[ -z $FUNCTION ] && exit
	die 1 "error: \"$FUNCTION\" is not a valid function or repository"
else
	ghar_${FUNCTION} $@
fi
